//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Constructor"",
            ""id"": ""017de5f8-fe3b-4065-b55b-3270d7d4fff2"",
            ""actions"": [
                {
                    ""name"": ""PieceTranslate"",
                    ""type"": ""Value"",
                    ""id"": ""95f0e78a-f039-4441-8baa-fd90c8afb323"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""7b76ecfe-74c1-4dc2-8772-887e1c21fdba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fast"",
                    ""type"": ""Button"",
                    ""id"": ""a03948cd-e4ac-408d-8934-570bac6b844c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""837e93fe-0ff7-48e5-b4e1-917a23ab3d28"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceTranslate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""63a8b0ae-f41a-4d35-a858-ab8074f1727e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceTranslate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4af3c9e4-f2e2-42f3-b179-c1db66e60820"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceTranslate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6d0d7744-d9f4-4bec-a1fd-ec2768304ac6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b064c426-634b-4b6f-8f22-8774dbd17c81"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Climber"",
            ""id"": ""640cd987-4160-4da4-b087-cbc8414aa8af"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0209bb27-f94e-42fd-96bd-7a8e05f3c741"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""7e6bf489-ee77-45ca-8575-a0d0e6094da5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c91f6058-ae30-48e4-a00e-30211e35412c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f58d68c0-833a-4119-be72-8eca82cdb1a0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ce132c3d-1d35-4b54-83e1-44861577e1d6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4dfda328-6467-4469-b956-e5185e5de78d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""c34a84a0-b102-4197-a862-fe849c23b924"",
            ""actions"": [
                {
                    ""name"": ""quit"",
                    ""type"": ""Button"",
                    ""id"": ""b3eb8ee1-e158-44ea-8a97-10c1451cdb00"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""hide"",
                    ""type"": ""Button"",
                    ""id"": ""a0882e66-e893-4c82-80ab-ad25996b95ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""520ed425-7b98-4cda-b886-157602968656"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9e80836-4eb4-429f-bc8e-248c69fa9eef"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Constructor
        m_Constructor = asset.FindActionMap("Constructor", throwIfNotFound: true);
        m_Constructor_PieceTranslate = m_Constructor.FindAction("PieceTranslate", throwIfNotFound: true);
        m_Constructor_Rotate = m_Constructor.FindAction("Rotate", throwIfNotFound: true);
        m_Constructor_Fast = m_Constructor.FindAction("Fast", throwIfNotFound: true);
        // Climber
        m_Climber = asset.FindActionMap("Climber", throwIfNotFound: true);
        m_Climber_Jump = m_Climber.FindAction("Jump", throwIfNotFound: true);
        m_Climber_move = m_Climber.FindAction("move", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_quit = m_UI.FindAction("quit", throwIfNotFound: true);
        m_UI_hide = m_UI.FindAction("hide", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Constructor
    private readonly InputActionMap m_Constructor;
    private IConstructorActions m_ConstructorActionsCallbackInterface;
    private readonly InputAction m_Constructor_PieceTranslate;
    private readonly InputAction m_Constructor_Rotate;
    private readonly InputAction m_Constructor_Fast;
    public struct ConstructorActions
    {
        private @GameInput m_Wrapper;
        public ConstructorActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PieceTranslate => m_Wrapper.m_Constructor_PieceTranslate;
        public InputAction @Rotate => m_Wrapper.m_Constructor_Rotate;
        public InputAction @Fast => m_Wrapper.m_Constructor_Fast;
        public InputActionMap Get() { return m_Wrapper.m_Constructor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConstructorActions set) { return set.Get(); }
        public void SetCallbacks(IConstructorActions instance)
        {
            if (m_Wrapper.m_ConstructorActionsCallbackInterface != null)
            {
                @PieceTranslate.started -= m_Wrapper.m_ConstructorActionsCallbackInterface.OnPieceTranslate;
                @PieceTranslate.performed -= m_Wrapper.m_ConstructorActionsCallbackInterface.OnPieceTranslate;
                @PieceTranslate.canceled -= m_Wrapper.m_ConstructorActionsCallbackInterface.OnPieceTranslate;
                @Rotate.started -= m_Wrapper.m_ConstructorActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_ConstructorActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_ConstructorActionsCallbackInterface.OnRotate;
                @Fast.started -= m_Wrapper.m_ConstructorActionsCallbackInterface.OnFast;
                @Fast.performed -= m_Wrapper.m_ConstructorActionsCallbackInterface.OnFast;
                @Fast.canceled -= m_Wrapper.m_ConstructorActionsCallbackInterface.OnFast;
            }
            m_Wrapper.m_ConstructorActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PieceTranslate.started += instance.OnPieceTranslate;
                @PieceTranslate.performed += instance.OnPieceTranslate;
                @PieceTranslate.canceled += instance.OnPieceTranslate;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Fast.started += instance.OnFast;
                @Fast.performed += instance.OnFast;
                @Fast.canceled += instance.OnFast;
            }
        }
    }
    public ConstructorActions @Constructor => new ConstructorActions(this);

    // Climber
    private readonly InputActionMap m_Climber;
    private IClimberActions m_ClimberActionsCallbackInterface;
    private readonly InputAction m_Climber_Jump;
    private readonly InputAction m_Climber_move;
    public struct ClimberActions
    {
        private @GameInput m_Wrapper;
        public ClimberActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Climber_Jump;
        public InputAction @move => m_Wrapper.m_Climber_move;
        public InputActionMap Get() { return m_Wrapper.m_Climber; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ClimberActions set) { return set.Get(); }
        public void SetCallbacks(IClimberActions instance)
        {
            if (m_Wrapper.m_ClimberActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_ClimberActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ClimberActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ClimberActionsCallbackInterface.OnJump;
                @move.started -= m_Wrapper.m_ClimberActionsCallbackInterface.OnMove;
                @move.performed -= m_Wrapper.m_ClimberActionsCallbackInterface.OnMove;
                @move.canceled -= m_Wrapper.m_ClimberActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_ClimberActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
            }
        }
    }
    public ClimberActions @Climber => new ClimberActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_quit;
    private readonly InputAction m_UI_hide;
    public struct UIActions
    {
        private @GameInput m_Wrapper;
        public UIActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @quit => m_Wrapper.m_UI_quit;
        public InputAction @hide => m_Wrapper.m_UI_hide;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @quit.started -= m_Wrapper.m_UIActionsCallbackInterface.OnQuit;
                @quit.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnQuit;
                @quit.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnQuit;
                @hide.started -= m_Wrapper.m_UIActionsCallbackInterface.OnHide;
                @hide.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnHide;
                @hide.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnHide;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @quit.started += instance.OnQuit;
                @quit.performed += instance.OnQuit;
                @quit.canceled += instance.OnQuit;
                @hide.started += instance.OnHide;
                @hide.performed += instance.OnHide;
                @hide.canceled += instance.OnHide;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IConstructorActions
    {
        void OnPieceTranslate(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnFast(InputAction.CallbackContext context);
    }
    public interface IClimberActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnQuit(InputAction.CallbackContext context);
        void OnHide(InputAction.CallbackContext context);
    }
}
